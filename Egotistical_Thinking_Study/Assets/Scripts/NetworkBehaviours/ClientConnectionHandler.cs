using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using UnityEngine;
using Unity.Netcode;

public class ClientConnectionHandler : NetworkBehaviour
{
    private static ClientConnectionHandler _instance;
    public static ClientConnectionHandler Instance
    {
        get { return _instance; }
    }
    [SerializeField] private List<GameObject> playerPrefabs;

    public int m_numConnectedClients = 0;

    void Awake()
    {
        if (_instance != null && _instance != this)
        {
            Destroy(this.gameObject);
        }
        else
        {
            _instance = this;
        }
    }
    
    public struct PlayerSessionInfo
    {
        public int playerNum;
        public ulong clientId;
    }
    
    public Dictionary<Guid, PlayerSessionInfo> serverSideClientList;
    
    public override void OnNetworkSpawn()
    {
        if (this.IsServer)
        {
            serverSideClientList = new Dictionary<Guid, PlayerSessionInfo>();
            NetworkManager.Singleton.ConnectionApprovalCallback += Server_ApproveConnection;
        }   
    }
    
    private void Server_ApproveConnection(NetworkManager.ConnectionApprovalRequest request,
        NetworkManager.ConnectionApprovalResponse response)
    {
        ulong clientId = request.ClientNetworkId;
        
        //payload should only contain the GUID generated by the connecting player.
        Guid playerSessionGuid = new Guid(request.Payload);
        PlayerSessionInfo sessionInfo;
        if (serverSideClientList.ContainsKey(playerSessionGuid))
        {
            sessionInfo = serverSideClientList[playerSessionGuid];
            sessionInfo.clientId = clientId;
        }
        else
        {
            sessionInfo.playerNum = serverSideClientList.Keys.Count;
            sessionInfo.clientId = clientId;
            serverSideClientList.Add(playerSessionGuid, sessionInfo);
            m_numConnectedClients++;
        }
        
        response.Approved = true;
        response.CreatePlayerObject = true;
        response.PlayerPrefabHash = (uint)typeof(NetworkObject).GetProperty("GlobalObjectIdHash").GetValue(playerPrefabs[sessionInfo.playerNum].GetComponent<NetworkObject>());
    }
    
}
