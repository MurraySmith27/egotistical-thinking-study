using System;
using System.Collections.Generic;
using UnityEngine;
using Unity.Netcode;

public class ClientConnectionHandler : NetworkBehaviour
{
    [SerializeField] private List<GameObject> playerPrefabs;
    
    private struct PlayerSessionInfo
    {
        public int playerNum;
    }
    private Dictionary<Guid, PlayerSessionInfo> serverSideClientList;
    
    public override void OnNetworkSpawn()
    {
        if (this.IsServer)
        {
            serverSideClientList = new Dictionary<Guid, PlayerSessionInfo>();
            NetworkManager.Singleton.ConnectionApprovalCallback += Server_ApproveConnection;
        }   
    }
    
    private void Server_ApproveConnection(NetworkManager.ConnectionApprovalRequest request,
        NetworkManager.ConnectionApprovalResponse response)
    {
        ulong clientId = request.ClientNetworkId;
        
        //payload should only contain the GUID generated by the connecting player.
        Guid playerSessionGuid = new Guid(request.Payload);
        PlayerSessionInfo sessionInfo;
        if (serverSideClientList.ContainsKey(playerSessionGuid))
        {
            sessionInfo = serverSideClientList[playerSessionGuid];
        }
        else
        {
            sessionInfo.playerNum = serverSideClientList.Keys.Count + 1;
            serverSideClientList.Add(playerSessionGuid, sessionInfo);
        }

        

        response.Approved = true;
        response.CreatePlayerObject = true;
        response.PlayerPrefabHash = (uint)typeof(NetworkObject).GetProperty("GlobalObjectIdHash").GetValue(playerPrefabs[sessionInfo.playerNum].GetComponent<NetworkObject>());

        Debug.Log($"Hash: {response.PlayerPrefabHash}");


    }
    
}
